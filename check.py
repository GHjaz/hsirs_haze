import os
import numpy as np
import cv2
import matplotlib.pyplot as plt
import spectral.io.envi as envi
from PIL import Image

def load_npy_file(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç .npy —Ñ–∞–π–ª (–≥–∏–ø–µ—Ä—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –º–∞—Ç—Ä–∏—Ü—É –≥–æ–º–æ–≥—Ä–∞—Ñ–∏–∏)."""
    return np.load(file_path)

def apply_homography_to_hsi(hsi_image, H):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –≥–æ–º–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –≥–∏–ø–µ—Ä—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
    –ö–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.
    """
    height, width, num_bands = hsi_image.shape  # –†–∞–∑–º–µ—Ä—ã HSI (H, W, C)
    transformed_hsi = np.zeros((height, width, num_bands), dtype=hsi_image.dtype)  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤

    for band in range(num_bands):
        warped_band = cv2.warpPerspective(hsi_image[:, :, band], H, (width, height))[:,:,None]

        if warped_band.shape != (height, width):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
            raise ValueError(f"–†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {warped_band.shape} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É ({height}, {width})")

        transformed_hsi[:, :, band] = warped_band  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ

    return transformed_hsi


def save_rgb_visualization(hsi_image, output_path, channels=(30, 20, 10)):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç RGB-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–Ω–∞–ª—ã (30, 20, 10).
    """
    rgb_image = np.stack([hsi_image[:, :, channels[0]], 
                          hsi_image[:, :, channels[1]], 
                          hsi_image[:, :, channels[2]]], axis=-1)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    rgb_image = np.clip((rgb_image - np.min(rgb_image)) / (np.max(rgb_image) - np.min(rgb_image)) * 255, 0, 255)
    rgb_image = rgb_image.astype(np.uint8)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    cv2.imwrite(output_path, cv2.cvtColor(rgb_image, cv2.COLOR_RGB2BGR))
    print(f"‚úÖ RGB-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    plt.imshow(rgb_image)
    plt.axis("off")
    plt.title("RGB –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    plt.show()

# üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞

homography_path = "raw_radiance_data/Transform/3/f210402t01p00r09_sc01_RGB_transformation.npy"  # –ú–∞—Ç—Ä–∏—Ü–∞ –≥–æ–º–æ–≥—Ä–∞—Ñ–∏–∏
output_hsi_path = "raw_radiance_data/sample_hsi_aligned.npy"  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ HSI
output_rgb_path = "raw_radiance_data/sample_hsi_rgb.png"  # RGB-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è





# –£–∫–∞–∂–∏ –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
# img_path = "flight08/f210402t01p00r08rdn_g_sc01_ort_img" # clean
img_path = "raw_radiance_data/f210402t01p00r09/f210402t01p00r09rdn_g/f210402t01p00r09rdn_g_sc01_ort_img" # hazed 
hdr_path = img_path + ".hdr"


wls1 = {"wavelength": [365.9298, 375.594, 385.2625, 394.9355, 404.6129, 414.2946, 423.9808, 433.6713, 443.3662, 453.0655, 462.7692, 472.4773, 482.1898, 491.9066, 501.6279, 511.3535, 521.0836, 530.818, 540.5568, 550.3, 560.0477, 569.7996, 579.556, 589.3168, 599.0819, 608.8515, 618.6254, 628.4037, 638.1865, 647.9736, 657.7651, 667.561, 654.7923, 664.5994, 674.4012, 684.1979, 693.9894, 703.7756, 713.5566, 723.3325, 733.1031, 742.8685, 752.6287, 762.3837, 772.1335, 781.8781, 791.6174, 801.3516, 811.0805, 820.8043, 830.5228, 840.2361, 849.9442, 859.6471, 869.3448, 879.0372, 888.7245, 898.4066, 908.0834, 917.7551, 927.4214, 937.0827, 946.7387, 956.3895, 966.0351, 975.6755, 985.3106, 994.9406, 1004.565, 1014.185, 1023.799, 1033.408, 1043.012, 1052.611, 1062.204, 1071.793, 1081.376, 1090.954, 1100.526, 1110.094, 1119.656, 1129.213, 1138.765, 1148.311, 1157.853, 1167.389, 1176.92, 1186.446, 1195.966, 1205.482, 1214.992, 1224.497, 1233.996, 1243.491, 1252.98, 1262.464, 1252.773, 1262.746, 1272.718, 1282.691, 1292.662, 1302.634, 1312.606, 1322.577, 1332.548, 1342.519, 1352.49, 1362.46, 1372.43, 1382.4, 1392.369, 1402.339, 1412.308, 1422.277, 1432.245, 1442.214, 1452.182, 1462.15, 1472.118, 1482.085, 1492.052, 1502.019, 1511.986, 1521.952, 1531.918, 1541.885, 1551.85, 1561.816, 1571.781, 1581.746, 1591.711, 1601.675, 1611.64, 1621.604, 1631.568, 1641.531, 1651.494, 1661.458, 1671.42, 1681.383, 1691.345, 1701.307, 1711.269, 1721.231, 1731.192, 1741.153, 1751.114, 1761.075, 1771.036, 1780.996, 1790.956, 1800.915, 1810.875, 1820.834, 1830.793, 1840.752, 1850.71, 1860.669, 1870.627, 1871.784, 1865.964, 1876.025, 1886.085, 1896.141, 1906.196, 1916.248, 1926.298, 1936.346, 1946.391, 1956.435, 1966.475, 1976.514, 1986.55, 1996.584, 2006.615, 2016.645, 2026.672, 2036.696, 2046.719, 2056.739, 2066.756, 2076.772, 2086.785, 2096.796, 2106.804, 2116.81, 2126.814, 2136.816, 2146.815, 2156.812, 2166.807, 2176.799, 2186.789, 2196.777, 2206.762, 2216.745, 2226.726, 2236.705, 2246.681, 2256.655, 2266.626, 2276.595, 2286.562, 2296.527, 2306.49, 2316.449, 2326.407, 2336.363, 2346.316, 2356.267, 2366.215, 2376.161, 2386.105, 2396.047, 2405.986, 2415.923, 2425.858, 2435.79, 2445.72, 2455.648, 2465.573, 2475.496, 2485.417, 2495.336]}

wls2 = {"wavelength": [365.9298, 375.594, 385.2625, 394.9355, 404.6129, 414.2946, 423.9808, 433.6713, 443.3662, 453.0655, 462.7692, 472.4773, 482.1898, 491.9066, 501.6279, 511.3535, 521.0836, 530.818, 540.5568, 550.3, 560.0477, 569.7996, 579.556, 589.3168, 599.0819, 608.8515, 618.6254, 628.4037, 638.1865, 647.9736, 657.7651, 667.561, 654.7923, 664.5994, 674.4012, 684.1979, 693.9894, 703.7756, 713.5566, 723.3325, 733.1031, 742.8685, 752.6287, 762.3837, 772.1335, 781.8781, 791.6174, 801.3516, 811.0805, 820.8043, 830.5228, 840.2361, 849.9442, 859.6471, 869.3448, 879.0372, 888.7245, 898.4066, 908.0834, 917.7551, 927.4214, 937.0827, 946.7387, 956.3895, 966.0351, 975.6755, 985.3106, 994.9406, 1004.565, 1014.185, 1023.799, 1033.408, 1043.012, 1052.611, 1062.204, 1071.793, 1081.376, 1090.954, 1100.526, 1110.094, 1119.656, 1129.213, 1138.765, 1148.311, 1157.853, 1167.389, 1176.92, 1186.446, 1195.966, 1205.482, 1214.992, 1224.497, 1233.996, 1243.491, 1252.98, 1262.464, 1252.773, 1262.746, 1272.718, 1282.691, 1292.662, 1302.634, 1312.606, 1452.182, 1462.15, 1472.118, 1482.085, 1492.052, 1502.019, 1511.986, 1521.952, 1531.918, 1541.885, 1551.85, 1561.816, 1571.781, 1581.746, 1591.711, 1601.675, 1611.64, 1621.604, 1631.568]}

lst_idx = [wls1['wavelength'].index(i) for i in wls2['wavelength']]

# –ß–∏—Ç–∞–µ–º –≥–∏–ø–µ—Ä—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
hsi_image = envi.open(hdr_path, img_path).load()

hsi_image = hsi_image[..., lst_idx]

H = load_npy_file(homography_path)

# üîπ –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–æ–º–æ–≥—Ä–∞—Ñ–∏—é
aligned_hsi = apply_homography_to_hsi(hsi_image, H)

# üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ HSI
np.save(output_hsi_path, aligned_hsi)
print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ HSI —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_hsi_path}")

# üîπ –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º RGB-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
save_rgb_visualization(aligned_hsi, output_rgb_path, channels=(37, 19, 7))
